@model List<WebApplication1.Models.TimeRelated.CalendarEvent>

<link rel="stylesheet" href="~/css/PageCard/PageCard.css" />



<div class="CardContainer">
    <div style="text-align:center;" class="CardSection">
        <h1 style="font-size:80px;">Calendrier</h1>
        @(Html.Kendo().Scheduler<WebApplication1.Models.TimeRelated.CalendarEvent>()
            .Name("scheduler")
            .Date(DateTime.Now.Date)
            .StartTime(DateTime.Now.Date)
            .AllDaySlot(false)
            .Editable(false)
            .Events(e =>
            {
                e.Remove("Disable");
                e.DataBound("dataBound");
                e.Resize("Disable");
                e.MoveEnd("Disable");
                e.Edit("edit");
            })
            .Views(views =>
            {
                views.DayView();
                views.WeekView();
                views.MonthView(MonthView => MonthView.Selected(true));
                views.AgendaView();
            })
                .Timezone("Etc/UTC")
                .Resources(resource =>
    {
        resource.Add(m => m.Color)
            .Title("Owner")
            .DataTextField("Text")
            .DataValueField("Value")
            .DataColorField("Color")
            .BindTo(new[] {
                new { Text = "red", Value = 1, Color = "#eb9696" } ,
                new { Text = "blue", Value = 2, Color = "#262fa6" } ,
                new { Text = "green", Value = 3, Color = "#54c954" },
                new { Text = "pink", Value = 4, Color = "#bc54cc" } ,
                new { Text = "yellow", Value = 5, Color = "#dbd35c" } ,
                new { Text = "blueGreen", Value = 6, Color = "#51cdd4" },
                new { Text = "Black", Value = 7, Color = "#021112" },
            });
    })
                .DataSource(d => d
                    .Model(m =>
                    {
                        m.Id(f => f.TaskId);
                        m.Field(f => f.Title).DefaultValue("No title");
                        m.Field(f => f.Title).DefaultValue("No title");
                        m.RecurrenceId(f => f.RecurrenceID);
                    })
                    .Read("Read", "Calendar")

            )
        )
    </div>
</div>

<script>


    function Disable(e) {
                e.preventDefault();
        }

    function edit(e) {
            e.preventDefault();
        
    }
        function dataBound(e) {
            let scheduler = e.sender;
            $(".k-event").each(function () {
                var uid = $(this).data("uid");
                var event = scheduler.occurrenceByUid(uid);
                    // use .k-event-delete,.k-resize-handle if you want to prevent also resizing
                    $(this).find(".k-event-delete").hide();
                    $(this).find(".k-event-edite").hide();

               
            });
        }

        //function occurrencesInRangeByResource(start, end, resourceFieldName, event, resources) {
        //    var scheduler = $("#scheduler").getKendoScheduler();

        //    var occurrences = scheduler.occurrencesInRange(start, end);

        //    var idx = occurrences.indexOf(event);
        //    if (idx > -1) {
        //        occurrences.splice(idx, 1);
        //    }

        //    event = $.extend({}, event, resources);

        //    return filterByResource(occurrences, resourceFieldName, event[resourceFieldName]);
        //}

        //function filterByResource(occurrences, resourceFieldName, value) {
        //    var result = [];
        //    var occurrence;

        //    for (var idx = 0, length = occurrences.length; idx < length; idx++) {
        //        occurrence = occurrences[idx];
        //        if (occurrence[resourceFieldName] === value) {
        //            result.push(occurrence);
        //        }
        //    }
        //    return result;
        //}

        //function attendeeIsOccupied(start, end, event, resources) {
        //    var occurrences = occurrencesInRangeByResource(start, end, "attendee", event, resources);
        //    if (occurrences.length > 0) {
        //        return true;
        //    }
        //    return false;
        //}

        //function roomIsOccupied(start, end, event, resources) {
        //    var occurrences = occurrencesInRangeByResource(start, end, "roomId", event, resources);
        //    if (occurrences.length > 0) {
        //        return true;
        //    }
        //    return false;
        //}

        //function checkAvailability(start, end, event, resources) {

        //    if (attendeeIsOccupied(start, end, event, resources)) {
        //        setTimeout(function () {
        //            alert("This person is not available in this time period.");
        //        }, 0);

        //        return false;
        //    }

        //    if (roomIsOccupied(start, end, event, resources)) {
        //        setTimeout(function () {
        //            alert("This Time Period is not available.");
        //        }, 0);

        //        return false;
        //    }

        //    return true;
        //}

</script>
